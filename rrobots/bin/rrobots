#!/usr/bin/env ruby
require 'rrobots'
require 'optparse'
require 'ostruct'

class OptionsParser
  def self.parse!(args)
    options = OpenStruct.new
    options.resolution  = [800,800]
    options.match = 1
    options.gui = true
    options.timeout = 5000
    options.teams = []

    opts = OptionParser.new do |opts|
      opts.banner = "Usage: rrobots [options] file1 file2 ..."

      opts.on("--resolution x,y", Array, "X and Y resolution") do |resolution|
        options.resolution = resolution.map &:to_i
      end

      opts.on("--match N", Integer, "Replay match number N") do |n|
        options.match = n
      end

      opts.on("--timeout N", Integer, "Maximum number of ticks for a match") do |n|
        options.timeout = n
      end

      opts.on("--teams N(,M...)", Array, "Splits robots into array size teams by specified number of robots from head") do |arr|
        options.teams = arr.map &:to_i
      end

      opts.on("--[no-]gui", "Run the match with the GUI") do |y|
        options.gui = y
      end

      opts.on("--slow N", Float, "Sleep N seconds every tick") do |n|
        options.slow = n
      end

      opts.on_tail("--league", "Leage battle") do
        options.league = true
      end

      opts.on_tail("--hero", "Hero mode") do
        options.hero = true
      end

      opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
      end
    end
    opts.parse!(args)
    if ARGV.size == 0
      puts opts
      exit
    end
    return options
  end
end

def run_out_of_gui(battlefield)
  until battlefield.game_over
    battlefield.tick
    $stderr.print "." if battlefield.time % (battlefield.timeout / 54).to_i == 0
  end
end

def setup_gui(xres, yres)
  require 'rrobots/gui' unless @required
  @required = true

  arena = RRobotsGameWindow.new(xres, yres)
end

def print_outcome(battlefield)
  winners = battlefield.robots.find_all{|robot| !robot.dead}
  puts
  if battlefield.robots.size > battlefield.teams.size
    teams = battlefield.teams.find_all{|name,team| !team.all?{|robot| robot.dead} }
    puts "winner_is:     { #{teams.map {|name,team| "Team #{name}: [#{team.join(', ')}]"}.join(', ')} }"
    puts "winner_energy: { #{teams.map {|name,team| "Team #{name}: [#{team.map do |w| ('%.1f' % w.energy) end.join(', ')}]"}.join(', ')} }"
  else
    puts "winner_is:     [#{winners.map{|w|w.name}.join(', ')}]"
    puts "winner_energy: [#{winners.map{|w|'%.1f' % w.energy}.join(', ')}]"
  end
  puts "elapsed_ticks: #{battlefield.time}"
  puts
end

def setup_battlefield(options, robots, round)
  @durable_context_by_name ||= {}
  battlefield = Battlefield.new options.resolution[0]*2, options.resolution[1]*2, options.timeout, round, options.slow

  robots.each do |robot|
    robot_no = robot[1]
    begin
      begin
        require "./"+robot[0].downcase
      rescue LoadError
      end
      begin
        require "./"+robot[0]
      rescue LoadError
      end

      in_game_name = File.basename(robot[0]).sub(/\..*$/, '')
      in_game_name = in_game_name.split('_').map{|name| name[0] = name[0,1].upcase; name}.join

      team = 0
       if options.teams.length > 0
        options.teams.inject(1) do |sum, team_size|
          team_tail = (sum + team_size)
          if robot_no < team_tail
            break
          end
          team += 1
          team_tail
        end
      else
        team = robot_no
      end
      robot = Object.const_get(in_game_name).new
      if options.gui
        robot.gui = true
      else
        robot.gui = false
      end
      robot.round = round
      @durable_context_by_name[robot_no] ||= {}
      robot.durable_context = @durable_context_by_name[robot_no]
      robotrunner = RobotRunner.new(robot, battlefield, team, "#{in_game_name}_#{robot_no}", options)
      battlefield << robotrunner
    rescue Exception => error
      puts 'Error loading ' + in_game_name.to_s + '!'
      warn error
    end
    in_game_name
  end
  battlefield
end

$stdout.sync = true

options = OptionsParser.parse!(ARGV)
robots = ARGV
robot_index = 0
robots = robots.map do |robot, index|
  robot_index += 1
  [robot, robot_index]
end

def vertical_format(line, offset, adding)
  line.slice!(offset, line.length)
  (offset - line.length).times.map {' '}.join + adding
  line.concat (offset - line.length).times.map {' '}.join + adding
end

def _print_results(robot_results, summary = nil, with_score = false)
  robot_results.each_slice(4) do |robot_results|
    offset = 0
    lines = Array.new(18){''}
    robot_results.each do |robot_result|
      vertical_format lines[0], offset, "#{robot_result[:name]}:"
      vertical_format lines[1], offset, "    score:               #{'%.1f' % robot_result[:score]}"
      vertical_format lines[2], offset, "    win:                 #{robot_result[:win]} / #{robot_result[:match]}"
      vertical_format lines[3], offset, "    kills:               #{robot_result[:kills]}"
      vertical_format lines[4], offset, "      (friend):          #{robot_result[:friend_kills]}"
      vertical_format lines[5], offset, "    damage_given:        #{'%.1f' % robot_result[:damage_given]}"
      vertical_format lines[6], offset, "      (friend):          #{'%.1f' % robot_result[:friend_damage_given]}"
      vertical_format lines[7], offset, "    damage_taken:        #{'%.1f' % robot_result[:damage_taken]}"
      vertical_format lines[8], offset, "    bullet_damage_given: #{'%.1f' % robot_result[:bullet_damage_given]}"
      vertical_format lines[9], offset, "      (friend):          #{'%.1f' % robot_result[:friend_bullet_damage_given]}"
      vertical_format lines[10], offset, "    bullet_damage_taken: #{'%.1f' % robot_result[:bullet_damage_taken]}"
      vertical_format lines[11], offset, "    bullet_hit:          #{'%d' % robot_result[:num_hit]}"
      vertical_format lines[12], offset, "    bullet_hit_ratio:    #{'%.1f%%' % (100.0 * robot_result[:num_hit] / robot_result[:num_fire])}"
      vertical_format lines[13], offset, "    ram_damage_given:    #{'%.1f' % robot_result[:ram_damage_given]}"
      vertical_format lines[14], offset, "      (friend):          #{'%.1f' % robot_result[:friend_ram_damage_given]}"
      vertical_format lines[15], offset, "    ram_damage_taken:    #{'%.1f' % robot_result[:ram_damage_taken]}"
      vertical_format lines[16], offset,"    ram_kills:           #{robot_result[:ram_kills]}"
      vertical_format lines[17], offset,"      (friend):          #{robot_result[:friend_ram_kills]}"
      offset += 34
      if with_score
        scores = score robot_result
        vertical_format lines[0], offset, " (score)"
        vertical_format lines[2], offset, " #{'(%.1f)' % scores[:win]}"
        vertical_format lines[3], offset, " #{'(%.1f)' % scores[:kills]}"
        vertical_format lines[4], offset, " #{'(%.1f)' % scores[:friend_kills]}"
        vertical_format lines[8], offset, " #{'(%.1f)' % scores[:bullet_damage_given]}"
        vertical_format lines[9], offset, " #{'(%.1f)' % scores[:friend_bullet_damage_given]}"
        vertical_format lines[13], offset, " #{'(%.1f)' % scores[:ram_damage_given]}"
        vertical_format lines[14], offset, " #{'(%.1f)' % scores[:friend_ram_damage_given]}"
        vertical_format lines[16], offset, " #{'(%.1f)' % scores[:ram_kills]}"
        vertical_format lines[17], offset, " #{'(%.1f)' % scores[:friend_ram_kills]}"
        offset += 12
      end
      if summary
        vertical_format lines[0], offset, " / all"
        vertical_format lines[1], offset, " / #{'%.1f' % summary[robot_result[:name]][:score]}"
        vertical_format lines[2], offset, " / #{summary[robot_result[:name]][:win]}"
        vertical_format lines[3], offset, " / #{summary[robot_result[:name]][:kills]}"
        vertical_format lines[4], offset, " / #{summary[robot_result[:name]][:friend_kills]}"
        vertical_format lines[5], offset, " / #{'%.1f' % summary[robot_result[:name]][:damage_given]}"
        vertical_format lines[6], offset, " / #{'%.1f' % summary[robot_result[:name]][:friend_damage_given]}"
        vertical_format lines[7], offset, " / #{'%.1f' % summary[robot_result[:name]][:damage_taken]}"
        vertical_format lines[8], offset, " / #{'%.1f' % summary[robot_result[:name]][:bullet_damage_given]}"
        vertical_format lines[9], offset, " / #{'%.1f' % summary[robot_result[:name]][:friend_bullet_damage_given]}"
        vertical_format lines[10], offset, " / #{'%.1f' % summary[robot_result[:name]][:bullet_damage_taken]}"
        vertical_format lines[11], offset, " / #{'%d' % summary[robot_result[:name]][:num_hit]}"
        vertical_format lines[12], offset, " / #{'%.1f%%' % (100.0 * summary[robot_result[:name]][:num_hit] / summary[robot_result[:name]][:num_fire])}"
        vertical_format lines[13], offset, " / #{'%.1f' % summary[robot_result[:name]][:ram_damage_given]}"
        vertical_format lines[14], offset, " / #{'%.1f' % summary[robot_result[:name]][:friend_ram_damage_given]}"
        vertical_format lines[15], offset, " / #{'%.1f' % summary[robot_result[:name]][:ram_damage_taken]}"
        vertical_format lines[16], offset, " / #{'%.1f' % summary[robot_result[:name]][:ram_kills]}"
        vertical_format lines[17], offset, " / #{'%.1f' % summary[robot_result[:name]][:friend_ram_kills]}"
        offset += 12
      end
    end
    puts lines.join "\n"
    puts
  end
end

def print_results(head, team_results, robot_results, summary = nil, with_score = false)
  puts head
  if team_results
    team_results.each do |team_result|
      results = [team_result]
      team_result[:members].each do |member|
        results << robot_results[member]
      end
      _print_results results, summary, with_score
    end
  else
    _print_results robot_results, summary, with_score
  end
end

def score(result)
  {
    win: result[:win] * 200,
    kills: result[:kills] * 50,
    friend_kills: result[:friend_kills] * -50,
    bullet_damage_given: result[:bullet_damage_given] * 2,
    friend_bullet_damage_given: result[:friend_bullet_damage_given] * -2,
    ram_damage_given: result[:ram_damage_given] * 0,
    friend_ram_damage_given: result[:friend_ram_damage_given] * -1,
    ram_kills: result[:ram_kills] * 100,
    friend_ram_kills: result[:friend_ram_kills] * -100,
  }
end

def print_battlefield_results(battlefield, summary, options, match_no, print = true)
  return unless summary
  team_results = {}
  robot_results = {}
  battlefield.robots.each do |robot|
    result = {
      match: 1,
      win: (!robot.dead ? 1 : 0),
      name: robot.uniq_name,
      kills: robot.kills,
      friend_kills: robot.friend_kills,
      damage_given: robot.damage_given,
      friend_damage_given: robot.friend_damage_given,
      damage_taken: robot.damage_taken,
      bullet_damage_given: robot.bullet_damage_given,
      friend_bullet_damage_given: robot.friend_bullet_damage_given,
      bullet_damage_taken: robot.bullet_damage_taken,
      num_hit: robot.num_hit,
      num_fire: robot.num_fire,
      ram_damage_given: robot.ram_damage_given,
      friend_ram_damage_given: robot.friend_ram_damage_given,
      ram_damage_taken: robot.ram_damage_taken,
      ram_kills: robot.ram_kills,
      friend_ram_kills: robot.friend_ram_kills,
    }
    result[:score] = score(result).values.inject(:+)

    team_name = "Team_#{robot.team}"
    if team_results[team_name]
      result.each do |k , v|
        unless v.instance_of? String or v.instance_of? Array
          team_results[team_name][k] += v
        end
      end
    else
      team_results[team_name] = result.dup
    end
    team_results[team_name][:name] = team_name
    team_results[team_name][:win] = 1 if team_results[team_name][:win] > 0
    team_results[team_name][:score] = score(team_results[team_name]).values.inject(:+)
    team_results[team_name][:members] ||= []
    team_results[team_name][:members] << robot.uniq_name

    if summary[robot.uniq_name]
      result.each do |k , v|
        unless v.instance_of? String
          summary[robot.uniq_name][k] += v
        end
      end
    else
      summary[robot.uniq_name] = result.dup
    end

    robot_results[result[:name]] = result
  end

  team_results.each do |team, team_result|
    if summary[team]
      team_result.each do |k, v|
        unless v.instance_of? String or v.instance_of? Array
          summary[team][k] += v
        end
      end
    else
      summary[team] = team_result.dup
    end
  end
  return unless print
  if options.teams.length == 0
    print_results("=== Battile: #{match_no} ===", nil, robot_results.values, summary)
  else
    print_results("=== Battile: #{match_no} ===", team_results.values, robot_results, summary)
  end
end

def print_final_result(results_order_by_score)
  lines = Array.new(results_order_by_score.length + 2){''}
  vertical_format lines[0], 0, "Name"
  vertical_format lines[1], 0, "-------------------------------"
  vertical_format lines[0], 20, "Win"
  vertical_format lines[1], 20, "-----------"
  vertical_format lines[0], 30, "Score"
  vertical_format lines[1], 30, "-----------"
  results_order_by_score.each_with_index do |result, index|
    vertical_format lines[index + 2], 0, "#{result[:name]}"
    vertical_format lines[index + 2], 20, "#{result[:win]}"
    vertical_format lines[index + 2], 30, "#{'%.1f' % result[:score]}"
  end
  puts lines.join "\n"
  puts
end

def print_league_result(summary_by_name, results_order_by_score)
  robot_names = results_order_by_score.map{|a| a[:name]}
  offset = 0
  lines = Array.new(robot_names.length + 2){''}
  vertical_format lines[0], offset, ""
  vertical_format lines[1], offset, "-------------------------------"
  results_order_by_score.each_with_index do |result, index|
    name = result[:name]
    score = result[:score].to_i
    vertical_format lines[index + 2], offset, "#{name}"
    vertical_format lines[index + 2], (offset + 20), "#{score}"
  end
  offset += 27
  robot_names.each_with_index do |name|
    summary_by_key = summary_by_name[name]
    vertical_format lines[0], offset, "| #{name}"
    vertical_format lines[1], offset, "+-----------------------"
    robot_names.each_with_index do |key, index|
      summary = summary_by_key[key]
      if summary
        mark = if summary[key][:win] > summary[name][:win]
                 'o'
               elsif summary[key][:win] == summary[name][:win]
                 '-'
               else
                 'x'
               end
        vertical_format lines[index+2], offset, "| #{mark}  #{summary[key][:win]} : #{summary[name][:win]}"
      else
        vertical_format lines[index+2], offset, "| **** "
      end
    end
    offset += 20
  end
  puts lines.join "\n"
  puts
end

def dump_result(options, summary, summary_by_name)
  if options.teams.length == 0
    results_order_by_score = summary.values.select{|a| !a[:name].start_with? 'Team_'}.sort{|a, b| b[:score] <=> a[:score]}
    print_results('=== Finally ===', nil, results_order_by_score, nil, true)
  else
    results_order_by_score = summary.values.select{|a| a[:name].start_with? 'Team_'}.sort{|a, b| b[:score] <=> a[:score]}
    print_results('=== Finally ===', results_order_by_score, summary, nil, true)
  end

  if options.league or options.hero
    print_league_result(summary_by_name, results_order_by_score)
  else
    print_final_result(results_order_by_score)
  end
end

summary = {}
summary_by_name = {}
summary_by_key = {}
match_no = 0
matches = []
(options.match || 1).times.each do
  if options.league or options.hero
    robots.each_with_index do |r1, index|
      robots[(index + 1)..-1].each_with_index do |r2|
        match_no += 1
        matches << [match_no, [r1, r2]]
      end
      break if options.hero
    end
  else
    match_no += 1
    matches << [match_no, robots]
  end
end

if options.gui
  arena = setup_gui(options.resolution[0], options.resolution[1])
  match = matches.shift
  battlefield = setup_battlefield(options, match[1], match[0])
  arena.set_battlefield(battlefield)
  game_over_counter = battlefield.teams.all?{|k,t| t.size < 2} ? 100 : 200
  arena.on_game_over{|battlefield|
    if game_over_counter < 0
      print_outcome(battlefield)
      key = battlefield.robots.map(&:uniq_name).join '-'
      summary_by_key[key] ||= {}
      print_battlefield_results battlefield, summary, options, match[0]
      battlefield.robots.each do |robot|
        summary_by_name[robot.uniq_name] ||= {}
        summary_by_name[robot.uniq_name][(battlefield.robots.map(&:uniq_name) - [robot.uniq_name]).join] ||= summary
      end
      match = matches.shift
      if match
        battlefield = setup_battlefield(options, match[1], match[0])
        arena.set_battlefield battlefield
        game_over_counter = battlefield.teams.all?{|k,t| t.size < 2} ? 100 : 200
      else
        arena.close
      end
    end
    game_over_counter -= 1
  }
  arena.show
else
  break_flg = false
  trap :INT do
    break_flg = true
  end
  trap :HUP do
    dump_result(options, summary, summary_by_name)
  end

  matches.each do |match|
    break if break_flg
    battlefield = setup_battlefield(options, match[1], match[0])
    run_out_of_gui(battlefield)
    print_outcome(battlefield)
    print_battlefield_results battlefield, summary, options, match[0]
    key = battlefield.robots.map(&:uniq_name).join '-'
    summary_by_key[key] ||= {}
    print_battlefield_results battlefield, summary_by_key[key], options, match[0], false
    battlefield.robots.each do |robot|
      summary_by_name[robot.uniq_name] ||= {}
      summary_by_name[robot.uniq_name][(battlefield.robots.map(&:uniq_name) - [robot.uniq_name]).join] ||= summary_by_key[key]
    end
  end
end

dump_result(options, summary, summary_by_name)
exit 0
